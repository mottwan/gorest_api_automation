{
  "info": {
    "_postman_id": "3db6752d-c9ea-4025-9bd1-5a438404f927",
    "name": "Users",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "check that user is missing",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "5ad91f1f-2be2-4c64-bc6b-37e897e3a8a2",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "e9437c8c-dc4b-4463-bd18-7b8ca961f52a",
            "exec": [
              "// Get expected name from collection variable\r",
              "const expectedName = pm.collectionVariables.get(\"first_new_name\");\r",
              "\r",
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "pm.test(`user with name \"${expectedName}\" does not exist`, () => {\r",
              "    responseJson.data.forEach((property) => {\r",
              "        pm.expect(property.name).to.not.equal(expectedName);\r",
              "    });\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "7a16a5fd-12a1-4bf0-9cbf-96c52f814a7a",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, success",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "1a347edf-04ea-486f-b421-7c14709a61b5",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Set user id collection variable \r",
              "pm.collectionVariables.set(\"user_id\", responseJson.data.id)\r",
              "\r",
              "// Set response body collection variable \r",
              "pm.collectionVariables.set(\"response_body\", JSON.stringify(responseJson.data))\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 201\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Created';\r",
              "\r",
              "// Test status code name\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "// Test status code\r",
              "pm.test(`response status code should be \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "// compare request and response body data\r",
              "pm.test(`Request body and response body should be identical`, () => {\r",
              "    delete responseJson.data.id\r",
              "    const isEqual = _.isEqual(responseJson.data, JSON.parse(pm.collectionVariables.get(\"post_data\")));\r",
              "    pm.expect(isEqual).to.be.true;\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "6d629adb-ef1a-4c81-8eeb-a389aa28c939",
            "exec": [
              "const name = pm.collectionVariables.get(\"first_new_name\");\r",
              "const email = name.replace(/\\s+/g, '').toLowerCase() + '@mail.com';\r",
              "pm.collectionVariables.set(\"first_new_email\", email);\r",
              "\r",
              "\r",
              "postBody = {\r",
              "    \"name\": `${name}`,\r",
              "    \"email\": `${email}`,\r",
              "    \"gender\": \"male\",\r",
              "    \"status\": \"active\"\r",
              "}\r",
              "pm.collectionVariables.set(\"post_data\", JSON.stringify(postBody));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "1671374b-4293-4e98-8a1b-b52ac7fd9cab",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{post_data}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, missing name",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "23955281-1f49-4db4-9d15-7bf714ce20b0",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 422\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Unprocessable Entity';\r",
              "\r",
              "// Test status code name\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "// Test status code\r",
              "pm.test(`response status code should be \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "// compare request and response body data\r",
              "pm.test(`response 'data.field=\"name\"' should have message \"can't be blank\"`, () => {\r",
              "    pm.expect(responseJson.data[0]).to.have.property(\"field\");\r",
              "    pm.expect(responseJson.data[0].field).to.equal(\"name\");\r",
              "    pm.expect(responseJson.data[0].message).to.equal(\"can't be blank\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "09e626ea-736c-49fe-9925-3c580550d7b3",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "0cd88ec9-be72-40aa-a536-2c5b3b56f19d",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"{{first_new_email}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, missing email",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "0d70517c-1673-49b6-a499-d3dbbcf41fe4",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 422\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Unprocessable Entity';\r",
              "\r",
              "// Test status code name\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "// Test status code\r",
              "pm.test(`response status code should be \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "// compare request and response body data\r",
              "pm.test(`response 'data.field=\"email\"' should have message \"can't be blank\"`, () => {\r",
              "    pm.expect(responseJson.data[0]).to.have.property(\"field\");\r",
              "    pm.expect(responseJson.data[0].field).to.equal(\"email\");\r",
              "    pm.expect(responseJson.data[0].message).to.equal(\"can't be blank\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "9b25aacd-f437-4605-b89b-93aae7f47b11",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "d824c1aa-cf66-4405-b027-f9251ccdac2b",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{first_new_name}}\",\r\n    \"email\": \"\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, missing gender",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "74216b24-ac17-4b48-bcbe-080ed93b991a",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 422\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Unprocessable Entity';\r",
              "\r",
              "// Test status code name\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "// Test status code\r",
              "pm.test(`response status code should be \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "// compare request and response body data\r",
              "pm.test(`response 'data.field=\"gender\"' should have message \"can't be blank\"`, () => {\r",
              "    pm.expect(responseJson.data[0]).to.have.property(\"field\");\r",
              "    pm.expect(responseJson.data[0].field).to.equal(\"gender\");\r",
              "    pm.expect(responseJson.data[0].message).to.equal(\"can't be blank\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "77db238a-997e-4dbd-b3b5-40d7a58c249b",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "50c35f54-49c3-4662-b475-03e82961d3ae",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{first_new_name}}\",\r\n    \"email\": \"{{first_new_email}}\",\r\n    \"gender\": \"\",\r\n    \"status\": \"active\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, missing status",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "5c272aec-729e-4d4e-bdc1-d396365f432e",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 422\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Unprocessable Entity';\r",
              "\r",
              "// Test status code name\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "// Test status code\r",
              "pm.test(`response status code should be \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "// compare request and response body data\r",
              "pm.test(`response 'data.field=\"status\"' should have message \"can't be blank\"`, () => {\r",
              "    pm.expect(responseJson.data[0]).to.have.property(\"field\");\r",
              "    pm.expect(responseJson.data[0].field).to.equal(\"status\");\r",
              "    pm.expect(responseJson.data[0].message).to.equal(\"can't be blank\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "a57248fe-8df0-4538-91f2-f7664676b010",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "36c629a5-b564-4e84-a33f-a9cd347b9730",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{first_new_name}}\",\r\n    \"email\": \"{{first_new_email}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "create a new user, unauthorized",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a11f6b06-1361-44c3-9289-47652a2d9d55",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 401\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Unauthorized';\r",
              "\r",
              "\r",
              "pm.test(`response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"response body should not be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              "pm.test(`response 'data' should have message \"Authentication failed\"`, () => {\r",
              "    pm.expect(responseJson.data.message).to.equal(\"Authentication failed\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "0dae2f1a-4bef-49cf-9446-e5b18c84da22",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{post_data}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users"
      },
      "response": []
    },
    {
      "name": "check that a defined user exists",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1c3c102d-b932-46fc-bae6-07faed47fc9a",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2a0704f8-1dee-4c7c-9369-427e134c9e07",
            "exec": [
              "// Get post body object collection variable\r",
              "const post_body = JSON.parse(pm.collectionVariables.get(\"response_body\"));\r",
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected name variable\r",
              "const expectedName = post_body.name;\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "pm.test('check newly created user', () => {\r",
              "    const isEqual = _.isEqual(post_body, responseJson.data);\r",
              "    pm.expect(isEqual).to.be.true;\r",
              "});\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "bacccac5-3455-478c-b2fd-5a531dadc857",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "update user name",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "e7e60032-0406-4e83-9afc-8817a60b7ee5",
            "exec": [
              "const name = pm.collectionVariables.get(\"first_new_name\")\r",
              "pm.collectionVariables.set(\"second_new_name\", name.split(' ')[0] + ' ' + Date.now());"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "a6641234-afa3-48cc-bb9e-cad2ef1eeea8",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Get collection variables\r",
              "const name = pm.collectionVariables.get(\"second_new_name\");\r",
              "const email = pm.collectionVariables.get(\"first_new_email\");\r",
              "const user_id = pm.collectionVariables.get(\"user_id\");\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`user name should be \"${name}\"`, () => {\r",
              "    pm.expect(responseJson.data.name).to.eql(name);\r",
              "});\r",
              "\r",
              "pm.test(`user email should be \"${email}\"`, () => {\r",
              "    pm.expect(responseJson.data.email).to.eql(email);\r",
              "});\r",
              "\r",
              "pm.test(`user status should be \"active\"`, () => {\r",
              "    pm.expect(responseJson.data.status).to.eql(\"active\");\r",
              "});\r",
              "\r",
              "pm.test(`user id should be \"${user_id}\"`, () => {\r",
              "    pm.expect(responseJson.data.id).to.eql(user_id);\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "ff3492e7-50eb-4e15-8977-8a1900b2900c",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{second_new_name}}\",\r\n    \"email\": \"{{first_new_email}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "update user email",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "62e3171e-5f3d-463c-b6b8-1d9cff9c3954",
            "exec": [
              "const name = pm.collectionVariables.get(\"second_new_name\")\r",
              "const email = name.replace(/\\s+/g, '').toLowerCase() + '@mail.com';\r",
              "pm.collectionVariables.set(\"second_new_email\", email);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "67741a80-7777-464a-aee6-70f1d71a7ae7",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Get collection variables\r",
              "const name = pm.collectionVariables.get(\"second_new_name\");\r",
              "const email = pm.collectionVariables.get(\"second_new_email\");\r",
              "const user_id = pm.collectionVariables.get(\"user_id\");\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`user name should be \"${name}\"`, () => {\r",
              "    pm.expect(responseJson.data.name).to.eql(name);\r",
              "});\r",
              "\r",
              "pm.test(`user email should be \"${email}\"`, () => {\r",
              "    pm.expect(responseJson.data.email).to.eql(email);\r",
              "});\r",
              "\r",
              "pm.test(`user status should be \"active\"`, () => {\r",
              "    pm.expect(responseJson.data.status).to.eql(\"active\");\r",
              "});\r",
              "\r",
              "pm.test(`user id should be \"${user_id}\"`, () => {\r",
              "    pm.expect(responseJson.data.id).to.eql(user_id);\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "b529a9f9-a02e-4812-936b-b422ee5c1241",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{second_new_name}}\",\r\n    \"email\": \"{{second_new_email}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "update user status",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "71d505bc-8319-4ef6-b185-2d2841e9d681",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "624d7dfe-7792-4195-9abe-0e07647663b1",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "const name = pm.collectionVariables.get(\"second_new_name\");\r",
              "const email = pm.collectionVariables.get(\"second_new_email\");\r",
              "const user_id = pm.collectionVariables.get(\"user_id\");\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`user name should be \"${name}\"`, () => {\r",
              "    pm.expect(responseJson.data.name).to.eql(name);\r",
              "});\r",
              "\r",
              "pm.test(`user email should be \"${email}\"`, () => {\r",
              "    pm.expect(responseJson.data.email).to.eql(email);\r",
              "});\r",
              "\r",
              "pm.test(`user status should be \"inactive\"`, () => {\r",
              "    pm.expect(responseJson.data.status).to.eql(\"inactive\");\r",
              "});\r",
              "\r",
              "pm.test(`user id should be \"${user_id}\"`, () => {\r",
              "    pm.expect(responseJson.data.id).to.eql(user_id);\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "f733d2c1-6a9e-4da3-bc30-766831a825d3",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{second_new_name}}\",\r\n    \"email\": \"{{second_new_email}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"inactive\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "update user with wrong gender type data",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "f5f48240-0838-42a9-ba84-72f6e8c044d6",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "62fe1e78-8f84-44a6-94ca-d614bf11da18",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseText = pm.response.text();\r",
              "console.log(responseText.split('\\n')[1])\r",
              "\r",
              "const name = pm.collectionVariables.get(\"second_new_name\");\r",
              "const email = pm.collectionVariables.get(\"second_new_email\");\r",
              "const user_id = pm.collectionVariables.get(\"user_id\");\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 500\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Internal Server Error';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "6da44a35-5572-4f72-88ff-f24482f5066d",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"{{second_new_name}}\",\r\n    \"email\": \"{{second_new_email}}\",\r\n    \"gender\": 1,\r\n    \"status\": \"inactive\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "check updated user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "340a9be1-16c2-4883-b8ef-9f0b01d5ce5e",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Get collection variables\r",
              "const name = pm.collectionVariables.get(\"second_new_name\");\r",
              "const email = pm.collectionVariables.get(\"second_new_email\");\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 200\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'OK';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`status code name should be \"${expectedStatusCodeName}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCodeName);\r",
              "});\r",
              "\r",
              "pm.test(`user should have name \"${name}\"`, () => {\r",
              "    pm.expect(responseJson.data.name).to.equal(name);\r",
              "});\r",
              "\r",
              "pm.test(`user should have email \"${email}\"`, () => {\r",
              "    pm.expect(responseJson.data.email).to.equal(email);\r",
              "});\r",
              "\r",
              "pm.test(`user should have status \"inactive\"`, () => {\r",
              "    pm.expect(responseJson.data.status).to.equal(\"inactive\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "970e046d-2444-4133-952e-0686797281f6",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "delete the user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "f5023686-13ae-4a6b-bbe8-35e77249d4a6",
            "exec": [
              "// Defining expected status code\r",
              "const expectedStatusCode = 204\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'No Content';\r",
              "\r",
              "\r",
              "pm.test(`Response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.not.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.not.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "9319dea8-12ac-49bb-8db8-eca0af60f5b7",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    },
    {
      "name": "delete non existing user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "b564a1a0-cca7-46b4-b8bd-bb182b7b2a80",
            "exec": [
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 404\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'Not Found';\r",
              "\r",
              "\r",
              "pm.test(`response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"message\" propery`, () => {\r",
              "    pm.expect(responseJson.data).to.have.property(\"message\");\r",
              "});\r",
              "\r",
              "pm.test(\"user should not be found\", () => {\r",
              "    pm.expect(responseJson.data.message).to.eql(\"Resource not found\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "2329d7a9-f683-44b4-b414-5f6784a1f1b2",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users/{{missing_user}}"
      },
      "response": []
    },
    {
      "name": "check that a deleted user is missing",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "28bd9916-cdce-4568-9255-f44b2e820cf2",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "7442090d-8bab-46ac-a552-c706e1d4622f",
            "exec": [
              "// Get post body object collection variable\r",
              "const post_body = JSON.parse(pm.collectionVariables.get(\"post_data\"));\r",
              "\r",
              "// Defining responseJson variable which contains response body json\r",
              "const responseJson = pm.response.json();\r",
              "\r",
              "// Defining expected name variable\r",
              "const expectedName = post_body.name;\r",
              "\r",
              "// Defining expected status code\r",
              "const expectedStatusCode = 404\r",
              "\r",
              "// Definning expected status code name \r",
              "const expectedStatusCodeName = 'No Found';\r",
              "\r",
              "\r",
              "pm.test(`response status code is \"${expectedStatusCode}\"`, () => {\r",
              "    pm.response.to.have.status(expectedStatusCode);\r",
              "});\r",
              "\r",
              "pm.test(\"response should not have error\", () => {\r",
              "    pm.response.to.be.error;\r",
              "});\r",
              "\r",
              "pm.test(\"response should be with body\", () => {\r",
              "    pm.response.to.be.withBody;\r",
              "});\r",
              "\r",
              "pm.test(\"response body should be json\", () => {\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"meta\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"meta\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"data\" propery`, () => {\r",
              "    pm.expect(responseJson).to.have.property(\"data\");\r",
              "});\r",
              "\r",
              "pm.test(`response body should have \"message\" propery`, () => {\r",
              "    pm.expect(responseJson.data).to.have.property(\"message\");\r",
              "});\r",
              "\r",
              "pm.test(\"user should not be found\", () => {\r",
              "    pm.expect(responseJson.data.message).to.eql(\"Resource not found\");\r",
              "});\r",
              "\r",
              "pm.test(\"Content-Type is present\", () => {\r",
              "    pm.response.to.have.header(\"Content-Type\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "cccbff4a-aa53-4a30-90ad-557f0f1a375b",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": {
            "token": "{{token}}"
          }
        },
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          }
        ],
        "url": "{{base_url}}/public/v1/users/{{user_id}}"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "e9f1de95-9ec2-41ce-aabf-9385136157a7",
        "type": "text/javascript",
        "exec": [
          "/*",
          "(c) by Thomas Konings",
          "Random Name Generator for Javascript",
          "*/",
          "",
          "function capFirst(string) {",
          "    return string.charAt(0).toUpperCase() + string.slice(1);",
          "}",
          "",
          "function getRandomInt(min, max) {",
          "  \treturn Math.floor(Math.random() * (max - min)) + min;",
          "}",
          "",
          "function generateName(){",
          "\tlet nameArr = [\"abandoned\",\"able\",\"absolute\",\"adorable\",\"adventurous\",\"academic\",\"acceptable\",\"acclaimed\",\"accomplished\",\"accurate\",\"aching\",\"acidic\",\"acrobatic\",\"active\",\"actual\",\"adept\",\"admirable\",\"admired\",\"adolescent\",\"adorable\",\"adored\",\"advanced\",\"afraid\",\"affectionate\",\"aged\",\"aggravating\",\"aggressive\",\"agile\",\"agitated\",\"agonizing\",\"agreeable\",\"ajar\",\"alarmed\",\"alarming\",\"alert\",\"alienated\",\"alive\",\"all\",\"altruistic\",\"amazing\",\"ambitious\",\"ample\",\"amused\",\"amusing\",\"anchored\",\"ancient\",\"angelic\",\"angry\",\"anguished\",\"animated\",\"annual\",\"another\",\"antique\",\"anxious\",\"any\",\"apprehensive\",\"appropriate\",\"apt\",\"arctic\",\"arid\",\"aromatic\",\"artistic\",\"ashamed\",\"assured\",\"astonishing\",\"athletic\",\"attached\",\"attentive\",\"attractive\",\"austere\",\"authentic\",\"authorized\",\"automatic\",\"avaricious\",\"average\",\"aware\",\"awesome\",\"awful\",\"awkward\",\"babyish\",\"bad\",\"back\",\"baggy\",\"bare\",\"barren\",\"basic\",\"beautiful\",\"belated\",\"beloved\",\"beneficial\",\"better\",\"best\",\"bewitched\",\"big\",\"big-hearted\",\"biodegradable\",\"bite-sized\",\"bitter\",\"black\",\"black-and-white\",\"bland\",\"blank\",\"blaring\",\"bleak\",\"blind\",\"blissful\",\"blond\",\"blue\",\"blushing\",\"bogus\",\"boiling\",\"bold\",\"bony\",\"boring\",\"bossy\",\"both\",\"bouncy\",\"bountiful\",\"bowed\",\"brave\",\"breakable\",\"brief\",\"bright\",\"brilliant\",\"brisk\",\"broken\",\"bronze\",\"brown\",\"bruised\",\"bubbly\",\"bulky\",\"bumpy\",\"buoyant\",\"burdensome\",\"burly\",\"bustling\",\"busy\",\"buttery\",\"buzzing\",\"calculating\",\"calm\",\"candid\",\"canine\",\"capital\",\"carefree\",\"careful\",\"careless\",\"caring\",\"cautious\",\"cavernous\",\"celebrated\",\"charming\",\"cheap\",\"cheerful\",\"cheery\",\"chief\",\"chilly\",\"chubby\",\"circular\",\"classic\",\"clean\",\"clear\",\"clear-cut\",\"clever\",\"close\",\"closed\",\"cloudy\",\"clueless\",\"clumsy\",\"cluttered\",\"coarse\",\"cold\",\"colorful\",\"colorless\",\"colossal\",\"comfortable\",\"common\",\"compassionate\",\"competent\",\"complete\",\"complex\",\"complicated\",\"composed\",\"concerned\",\"concrete\",\"confused\",\"conscious\",\"considerate\",\"constant\",\"content\",\"conventional\",\"cooked\",\"cool\",\"cooperative\",\"coordinated\",\"corny\",\"corrupt\",\"costly\",\"courageous\",\"courteous\",\"crafty\",\"crazy\",\"creamy\",\"creative\",\"creepy\",\"criminal\",\"crisp\",\"critical\",\"crooked\",\"crowded\",\"cruel\",\"crushing\",\"cuddly\",\"cultivated\",\"cultured\",\"cumbersome\",\"curly\",\"curvy\",\"cute\",\"cylindrical\",\"damaged\",\"damp\",\"dangerous\",\"dapper\",\"daring\",\"darling\",\"dark\",\"dazzling\",\"dead\",\"deadly\",\"deafening\",\"dear\",\"dearest\",\"decent\",\"decimal\",\"decisive\",\"deep\",\"defenseless\",\"defensive\",\"defiant\",\"deficient\",\"definite\",\"definitive\",\"delayed\",\"delectable\",\"delicious\",\"delightful\",\"delirious\",\"demanding\",\"dense\",\"dental\",\"dependable\",\"dependent\",\"descriptive\",\"deserted\",\"detailed\",\"determined\",\"devoted\",\"different\",\"difficult\",\"digital\",\"diligent\",\"dim\",\"dimpled\",\"dimwitted\",\"direct\",\"disastrous\",\"discrete\",\"disfigured\",\"disgusting\",\"disloyal\",\"dismal\",\"distant\",\"downright\",\"dreary\",\"dirty\",\"disguised\",\"dishonest\",\"dismal\",\"distant\",\"distinct\",\"distorted\",\"dizzy\",\"dopey\",\"doting\",\"double\",\"downright\",\"drab\",\"drafty\",\"dramatic\",\"dreary\",\"droopy\",\"dry\",\"dual\",\"dull\",\"dutiful\",\"each\",\"eager\",\"earnest\",\"early\",\"easy\",\"easy-going\",\"ecstatic\",\"edible\",\"educated\",\"elaborate\",\"elastic\",\"elated\",\"elderly\",\"electric\",\"elegant\",\"elementary\",\"elliptical\",\"embarrassed\",\"embellished\",\"eminent\",\"emotional\",\"empty\",\"enchanted\",\"enchanting\",\"energetic\",\"enlightened\",\"enormous\",\"enraged\",\"entire\",\"envious\",\"equal\",\"equatorial\",\"essential\",\"esteemed\",\"ethical\",\"euphoric\",\"even\",\"evergreen\",\"everlasting\",\"every\",\"evil\",\"exalted\",\"excellent\",\"exemplary\",\"exhausted\",\"excitable\",\"excited\",\"exciting\",\"exotic\",\"expensive\",\"experienced\",\"expert\",\"extraneous\",\"extroverted\",\"extra-large\",\"extra-small\",\"fabulous\",\"failing\",\"faint\",\"fair\",\"faithful\",\"fake\",\"false\",\"familiar\",\"famous\",\"fancy\",\"fantastic\",\"far\",\"faraway\",\"far-flung\",\"far-off\",\"fast\",\"fat\",\"fatal\",\"fatherly\",\"favorable\",\"favorite\",\"fearful\",\"fearless\",\"feisty\",\"feline\",\"female\",\"feminine\",\"few\",\"fickle\",\"filthy\",\"fine\",\"finished\",\"firm\",\"first\",\"firsthand\",\"fitting\",\"fixed\",\"flaky\",\"flamboyant\",\"flashy\",\"flat\",\"flawed\",\"flawless\",\"flickering\",\"flimsy\",\"flippant\",\"flowery\",\"fluffy\",\"fluid\",\"flustered\",\"focused\",\"fond\",\"foolhardy\",\"foolish\",\"forceful\",\"forked\",\"formal\",\"forsaken\",\"forthright\",\"fortunate\",\"fragrant\",\"frail\",\"frank\",\"frayed\",\"free\",\"French\",\"fresh\",\"frequent\",\"friendly\",\"frightened\",\"frightening\",\"frigid\",\"frilly\",\"frizzy\",\"frivolous\",\"front\",\"frosty\",\"frozen\",\"frugal\",\"fruitful\",\"full\",\"fumbling\",\"functional\",\"funny\",\"fussy\",\"fuzzy\",\"gargantuan\",\"gaseous\",\"general\",\"generous\",\"gentle\",\"genuine\",\"giant\",\"giddy\",\"gigantic\",\"gifted\",\"giving\",\"glamorous\",\"glaring\",\"glass\",\"gleaming\",\"gleeful\",\"glistening\",\"glittering\",\"gloomy\",\"glorious\",\"glossy\",\"glum\",\"golden\",\"good\",\"good-natured\",\"gorgeous\",\"graceful\",\"gracious\",\"grand\",\"grandiose\",\"granular\",\"grateful\",\"grave\",\"gray\",\"great\",\"greedy\",\"green\",\"gregarious\",\"grim\",\"grimy\",\"gripping\",\"grizzled\",\"gross\",\"grotesque\",\"grouchy\",\"grounded\",\"growing\",\"growling\",\"grown\",\"grubby\",\"gruesome\",\"grumpy\",\"guilty\",\"gullible\",\"gummy\",\"hairy\",\"half\",\"handmade\",\"handsome\",\"handy\",\"happy\",\"happy-go-lucky\",\"hard\",\"hard-to-find\",\"harmful\",\"harmless\",\"harmonious\",\"harsh\",\"hasty\",\"hateful\",\"haunting\",\"healthy\",\"heartfelt\",\"hearty\",\"heavenly\",\"heavy\",\"hefty\",\"helpful\",\"helpless\",\"hidden\",\"hideous\",\"high\",\"high-level\",\"hilarious\",\"hoarse\",\"hollow\",\"homely\",\"honest\",\"honorable\",\"honored\",\"hopeful\",\"horrible\",\"hospitable\",\"hot\",\"huge\",\"humble\",\"humiliating\",\"humming\",\"humongous\",\"hungry\",\"hurtful\",\"husky\",\"icky\",\"icy\",\"ideal\",\"idealistic\",\"identical\",\"idle\",\"idiotic\",\"idolized\",\"ignorant\",\"ill\",\"illegal\",\"ill-fated\",\"ill-informed\",\"illiterate\",\"illustrious\",\"imaginary\",\"imaginative\",\"immaculate\",\"immaterial\",\"immediate\",\"immense\",\"impassioned\",\"impeccable\",\"impartial\",\"imperfect\",\"imperturbable\",\"impish\",\"impolite\",\"important\",\"impossible\",\"impractical\",\"impressionable\",\"impressive\",\"improbable\",\"impure\",\"inborn\",\"incomparable\",\"incompatible\",\"incomplete\",\"inconsequential\",\"incredible\",\"indelible\",\"inexperienced\",\"indolent\",\"infamous\",\"infantile\",\"infatuated\",\"inferior\",\"infinite\",\"informal\",\"innocent\",\"insecure\",\"insidious\",\"insignificant\",\"insistent\",\"instructive\",\"insubstantial\",\"intelligent\",\"intent\",\"intentional\",\"interesting\",\"internal\",\"international\",\"intrepid\",\"ironclad\",\"irresponsible\",\"irritating\",\"itchy\",\"jaded\",\"jagged\",\"jam-packed\",\"jaunty\",\"jealous\",\"jittery\",\"joint\",\"jolly\",\"jovial\",\"joyful\",\"joyous\",\"jubilant\",\"judicious\",\"juicy\",\"jumbo\",\"junior\",\"jumpy\",\"juvenile\",\"kaleidoscopic\",\"keen\",\"key\",\"kind\",\"kindhearted\",\"kindly\",\"klutzy\",\"knobby\",\"knotty\",\"knowledgeable\",\"knowing\",\"known\",\"kooky\",\"kosher\",\"lame\",\"lanky\",\"large\",\"last\",\"lasting\",\"late\",\"lavish\",\"lawful\",\"lazy\",\"leading\",\"lean\",\"leafy\",\"left\",\"legal\",\"legitimate\",\"light\",\"lighthearted\",\"likable\",\"likely\",\"limited\",\"limp\",\"limping\",\"linear\",\"lined\",\"liquid\",\"little\",\"live\",\"lively\",\"livid\",\"loathsome\",\"lone\",\"lonely\",\"long\",\"long-term\",\"loose\",\"lopsided\",\"lost\",\"loud\",\"lovable\",\"lovely\",\"loving\",\"low\",\"loyal\",\"lucky\",\"lumbering\",\"luminous\",\"lumpy\",\"lustrous\",\"luxurious\",\"mad\",\"made-up\",\"magnificent\",\"majestic\",\"major\",\"male\",\"mammoth\",\"married\",\"marvelous\",\"masculine\",\"massive\",\"mature\",\"meager\",\"mealy\",\"mean\",\"measly\",\"meaty\",\"medical\",\"mediocre\",\"medium\",\"meek\",\"mellow\",\"melodic\",\"memorable\",\"menacing\",\"merry\",\"messy\",\"metallic\",\"mild\",\"milky\",\"mindless\",\"miniature\",\"minor\",\"minty\",\"miserable\",\"miserly\",\"misguided\",\"misty\",\"mixed\",\"modern\",\"modest\",\"moist\",\"monstrous\",\"monthly\",\"monumental\",\"moral\",\"mortified\",\"motherly\",\"motionless\",\"mountainous\",\"muddy\",\"muffled\",\"multicolored\",\"mundane\",\"murky\",\"mushy\",\"musty\",\"muted\",\"mysterious\",\"naive\",\"narrow\",\"nasty\",\"natural\",\"naughty\",\"nautical\",\"near\",\"neat\",\"necessary\",\"needy\",\"negative\",\"neglected\",\"negligible\",\"neighboring\",\"nervous\",\"new\",\"next\",\"nice\",\"nifty\",\"nimble\",\"nippy\",\"nocturnal\",\"noisy\",\"nonstop\",\"normal\",\"notable\",\"noted\",\"noteworthy\",\"novel\",\"noxious\",\"numb\",\"nutritious\",\"nutty\",\"obedient\",\"obese\",\"oblong\",\"oily\",\"oblong\",\"obvious\",\"occasional\",\"odd\",\"oddball\",\"offbeat\",\"offensive\",\"official\",\"old\",\"old-fashioned\",\"only\",\"open\",\"optimal\",\"optimistic\",\"opulent\",\"orange\",\"orderly\",\"organic\",\"ornate\",\"ornery\",\"ordinary\",\"original\",\"other\",\"our\",\"outlying\",\"outgoing\",\"outlandish\",\"outrageous\",\"outstanding\",\"oval\",\"overcooked\",\"overdue\",\"overjoyed\",\"overlooked\",\"palatable\",\"pale\",\"paltry\",\"parallel\",\"parched\",\"partial\",\"passionate\",\"past\",\"pastel\",\"peaceful\",\"peppery\",\"perfect\",\"perfumed\",\"periodic\",\"perky\",\"personal\",\"pertinent\",\"pesky\",\"pessimistic\",\"petty\",\"phony\",\"physical\",\"piercing\",\"pink\",\"pitiful\",\"plain\",\"plaintive\",\"plastic\",\"playful\",\"pleasant\",\"pleased\",\"pleasing\",\"plump\",\"plush\",\"polished\",\"polite\",\"political\",\"pointed\",\"pointless\",\"poised\",\"poor\",\"popular\",\"portly\",\"posh\",\"positive\",\"possible\",\"potable\",\"powerful\",\"powerless\",\"practical\",\"precious\",\"present\",\"prestigious\",\"pretty\",\"precious\",\"previous\",\"pricey\",\"prickly\",\"primary\",\"prime\",\"pristine\",\"private\",\"prize\",\"probable\",\"productive\",\"profitable\",\"profuse\",\"proper\",\"proud\",\"prudent\",\"punctual\",\"pungent\",\"puny\",\"pure\",\"purple\",\"pushy\",\"putrid\",\"puzzled\",\"puzzling\",\"quaint\",\"qualified\",\"quarrelsome\",\"quarterly\",\"queasy\",\"querulous\",\"questionable\",\"quick\",\"quick-witted\",\"quiet\",\"quintessential\",\"quirky\",\"quixotic\",\"quizzical\",\"radiant\",\"ragged\",\"rapid\",\"rare\",\"rash\",\"raw\",\"recent\",\"reckless\",\"rectangular\",\"ready\",\"real\",\"realistic\",\"reasonable\",\"red\",\"reflecting\",\"regal\",\"regular\",\"reliable\",\"relieved\",\"remarkable\",\"remorseful\",\"remote\",\"repentant\",\"required\",\"respectful\",\"responsible\",\"repulsive\",\"revolving\",\"rewarding\",\"rich\",\"rigid\",\"right\",\"ringed\",\"ripe\",\"roasted\",\"robust\",\"rosy\",\"rotating\",\"rotten\",\"rough\",\"round\",\"rowdy\",\"royal\",\"rubbery\",\"rundown\",\"ruddy\",\"rude\",\"runny\",\"rural\",\"rusty\",\"sad\",\"safe\",\"salty\",\"same\",\"sandy\",\"sane\",\"sarcastic\",\"sardonic\",\"satisfied\",\"scaly\",\"scarce\",\"scared\",\"scary\",\"scented\",\"scholarly\",\"scientific\",\"scornful\",\"scratchy\",\"scrawny\",\"second\",\"secondary\",\"second-hand\",\"secret\",\"self-assured\",\"self-reliant\",\"selfish\",\"sentimental\",\"separate\",\"serene\",\"serious\",\"serpentine\",\"several\",\"severe\",\"shabby\",\"shadowy\",\"shady\",\"shallow\",\"shameful\",\"shameless\",\"sharp\",\"shimmering\",\"shiny\",\"shocked\",\"shocking\",\"shoddy\",\"short\",\"short-term\",\"showy\",\"shrill\",\"shy\",\"sick\",\"silent\",\"silky\",\"silly\",\"silver\",\"similar\",\"simple\",\"simplistic\",\"sinful\",\"single\",\"sizzling\",\"skeletal\",\"skinny\",\"sleepy\",\"slight\",\"slim\",\"slimy\",\"slippery\",\"slow\",\"slushy\",\"small\",\"smart\",\"smoggy\",\"smooth\",\"smug\",\"snappy\",\"snarling\",\"sneaky\",\"sniveling\",\"snoopy\",\"sociable\",\"soft\",\"soggy\",\"solid\",\"somber\",\"some\",\"spherical\",\"sophisticated\",\"sore\",\"sorrowful\",\"soulful\",\"soupy\",\"sour\",\"Spanish\",\"sparkling\",\"sparse\",\"specific\",\"spectacular\",\"speedy\",\"spicy\",\"spiffy\",\"spirited\",\"spiteful\",\"splendid\",\"spotless\",\"spotted\",\"spry\",\"square\",\"squeaky\",\"squiggly\",\"stable\",\"staid\",\"stained\",\"stale\",\"standard\",\"starchy\",\"stark\",\"starry\",\"steep\",\"sticky\",\"stiff\",\"stimulating\",\"stingy\",\"stormy\",\"straight\",\"strange\",\"steel\",\"strict\",\"strident\",\"striking\",\"striped\",\"strong\",\"studious\",\"stunning\",\"stupendous\",\"stupid\",\"sturdy\",\"stylish\",\"subdued\",\"submissive\",\"substantial\",\"subtle\",\"suburban\",\"sudden\",\"sugary\",\"sunny\",\"super\",\"superb\",\"superficial\",\"superior\",\"supportive\",\"sure-footed\",\"surprised\",\"suspicious\",\"svelte\",\"sweaty\",\"sweet\",\"sweltering\",\"swift\",\"sympathetic\",\"tall\",\"talkative\",\"tame\",\"tan\",\"tangible\",\"tart\",\"tasty\",\"tattered\",\"taut\",\"tedious\",\"teeming\",\"tempting\",\"tender\",\"tense\",\"tepid\",\"terrible\",\"terrific\",\"testy\",\"thankful\",\"that\",\"these\",\"thick\",\"thin\",\"third\",\"thirsty\",\"this\",\"thorough\",\"thorny\",\"those\",\"thoughtful\",\"threadbare\",\"thrifty\",\"thunderous\",\"tidy\",\"tight\",\"timely\",\"tinted\",\"tiny\",\"tired\",\"torn\",\"total\",\"tough\",\"traumatic\",\"treasured\",\"tremendous\",\"tragic\",\"trained\",\"tremendous\",\"triangular\",\"tricky\",\"trifling\",\"trim\",\"trivial\",\"troubled\",\"true\",\"trusting\",\"trustworthy\",\"trusty\",\"truthful\",\"tubby\",\"turbulent\",\"twin\",\"ugly\",\"ultimate\",\"unacceptable\",\"unaware\",\"uncomfortable\",\"uncommon\",\"unconscious\",\"understated\",\"unequaled\",\"uneven\",\"unfinished\",\"unfit\",\"unfolded\",\"unfortunate\",\"unhappy\",\"unhealthy\",\"uniform\",\"unimportant\",\"unique\",\"united\",\"unkempt\",\"unknown\",\"unlawful\",\"unlined\",\"unlucky\",\"unnatural\",\"unpleasant\",\"unrealistic\",\"unripe\",\"unruly\",\"unselfish\",\"unsightly\",\"unsteady\",\"unsung\",\"untidy\",\"untimely\",\"untried\",\"untrue\",\"unused\",\"unusual\",\"unwelcome\",\"unwieldy\",\"unwilling\",\"unwitting\",\"unwritten\",\"upbeat\",\"upright\",\"upset\",\"urban\",\"usable\",\"used\",\"useful\",\"useless\",\"utilized\",\"utter\",\"vacant\",\"vague\",\"vain\",\"valid\",\"valuable\",\"vapid\",\"variable\",\"vast\",\"velvety\",\"venerated\",\"vengeful\",\"verifiable\",\"vibrant\",\"vicious\",\"victorious\",\"vigilant\",\"vigorous\",\"villainous\",\"violet\",\"violent\",\"virtual\",\"virtuous\",\"visible\",\"vital\",\"vivacious\",\"vivid\",\"voluminous\",\"wan\",\"warlike\",\"warm\",\"warmhearted\",\"warped\",\"wary\",\"wasteful\",\"watchful\",\"waterlogged\",\"watery\",\"wavy\",\"wealthy\",\"weak\",\"weary\",\"webbed\",\"wee\",\"weekly\",\"weepy\",\"weighty\",\"weird\",\"welcome\",\"well-documented\",\"well-groomed\",\"well-informed\",\"well-lit\",\"well-made\",\"well-off\",\"well-to-do\",\"well-worn\",\"wet\",\"which\",\"whimsical\",\"whirlwind\",\"whispered\",\"white\",\"whole\",\"whopping\",\"wicked\",\"wide\",\"wide-eyed\",\"wiggly\",\"wild\",\"willing\",\"wilted\",\"winding\",\"windy\",\"winged\",\"wiry\",\"wise\",\"witty\",\"wobbly\",\"woeful\",\"wonderful\",\"wooden\",\"woozy\",\"wordy\",\"worldly\",\"worn\",\"worried\",\"worrisome\",\"worse\",\"worst\",\"worthless\",\"worthwhile\",\"worthy\",\"wrathful\",\"wretched\",\"writhing\",\"wrong\",\"wry\",\"yawning\",\"yearly\",\"yellow\",\"yellowish\",\"young\",\"youthful\",\"yummy\",\"zany\",\"zealous\",\"zesty\",\"zigzag\",\"rocky\"];",
          "",
          "\tlet name = capFirst(nameArr[getRandomInt(0, nameArr.length + 1)]) + ' ' + Date.now();",
          "\treturn name;",
          "};",
          "",
          "pm.collectionVariables.set(\"first_new_name\", generateName());",
          "",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "9793eabf-243e-4180-af7e-3eb4a9895a82",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "82f04178-11e8-43e8-a495-eeefb91a4a7a",
      "key": "token",
      "value": "dff6fb62ceea158b858641d1c79e50e419547691d9bd6835174988b07deadee7"
    },
    {
      "id": "da8f1a3e-b045-4694-a804-c7b6dc617795",
      "key": "user_id",
      "value": ""
    },
    {
      "id": "f52e481e-f271-453a-b5db-b0cc2aa15b67",
      "key": "missing_user",
      "value": ""
    },
    {
      "id": "b002c225-dd3b-4088-b453-3acfe8f8e765",
      "key": "first_new_name",
      "value": ""
    },
    {
      "id": "b85b10cf-f16c-4be0-bca1-38cc7d1daea2",
      "key": "second_new_name",
      "value": ""
    },
    {
      "id": "ae6ff2ad-434d-42bf-a859-e25b6806e3b3",
      "key": "third_new_name",
      "value": ""
    },
    {
      "id": "959dc2b5-ad98-4013-b0d0-c611ac930fd7",
      "key": "first_new_email",
      "value": ""
    },
    {
      "id": "4875afee-0baa-4bc2-82b1-0c060b113758",
      "key": "post_data",
      "value": ""
    },
    {
      "id": "830cd984-00ac-416d-a294-6feff8e1fb77",
      "key": "second_new_email",
      "value": ""
    },
    {
      "id": "bb3455cf-e7ef-4a9a-887c-b0ec5302fe71",
      "key": "response_body",
      "value": ""
    }
  ]
}